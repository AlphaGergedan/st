From 3fed16771573a0f2b75c440da1278eff4fc3be8b Mon Sep 17 00:00:00 2001
From: Atamert Rahma <atamertrahma@gmail.com>
Date: Wed, 11 Sep 2024 11:00:05 +0200
Subject: [PATCH] add palettes patch

---
 config.def.h | 61 ++++++++++++++++++++++++----------------------------
 x.c          | 33 +++++++++++++---------------
 2 files changed, 43 insertions(+), 51 deletions(-)

diff --git a/config.def.h b/config.def.h
index 7bfb1d9..1b3d13d 100644
--- a/config.def.h
+++ b/config.def.h
@@ -97,46 +97,39 @@ unsigned int tabspaces = 8;
 float alpha = 0.8;
 float alpha_def;
 
-/* Terminal colors (16 first used in escape sequence) */
-static const char *colorname[] = {
-	/* 8 normal colors */
-	"black",
-	"red3",
-	"green3",
-	"yellow3",
-	"blue2",
-	"magenta3",
-	"cyan3",
-	"gray90",
-
-	/* 8 bright colors */
-	"gray50",
-	"red",
-	"green",
-	"yellow",
-	"#5c5cff",
-	"magenta",
-	"cyan",
-	"white",
-
-	[255] = 0,
-
-	/* more colors can be added after 255 to use with DefaultXX */
-	"#cccccc",
-	"#555555",
-	"gray90", /* default foreground colour */
-	"black", /* default background colour */
+/* 8 normal and 8 bright colors in each palette */
+static const char *palettes[][16] = {
+  { "#20242d", "#b04b57", "#87b379", "#e5c179", "#7d8fa4", "#a47996", "#85a7a5", "#b3b8c3", "#000000", "#b04b57", "#87b379", "#e5c179", "#7d8fa4", "#a47996", "#85a7a5", "#ffffff" },
+  {
+    "#fbf1c7", /* hard contrast: #f9f5d7 / soft contrast: #f2e5bc */
+    "#cc241d", /* red     */
+    "#98971a", /* green   */
+    "#d79921", /* yellow  */
+    "#458588", /* blue    */
+    "#b16286", /* magenta */
+    "#689d6a", /* cyan    */
+    "#7c6f64", /* white   */
+    "#928374", /* black   */
+    "#9d0006", /* red     */
+    "#79740e", /* green   */
+    "#b57614", /* yellow  */
+    "#076678", /* blue    */
+    "#8f3f71", /* magenta */
+    "#427b58", /* cyan    */
+    "#3c3836", /* white   */
+  },
 };
 
+static const char **colorname;
 
 /*
  * Default colors (colorname index)
  * foreground, background, cursor, reverse cursor
  */
-unsigned int defaultfg = 258;
-unsigned int defaultbg = 259;
-unsigned int defaultcs = 256;
-static unsigned int defaultrcs = 257;
+unsigned int defaultfg = 5;
+unsigned int defaultbg = 0;
+unsigned int defaultcs = 5;
+static unsigned int defaultrcs = 5;
 
 /*
  * Default shape of cursor
@@ -207,6 +200,8 @@ static Shortcut shortcuts[] = {
 	{ TERMMOD,              XK_Num_Lock,     numlock,        {.i =  0} },
   { MODKEY,               XK_bracketleft,  chgalpha,       {.f = -1} },
   { MODKEY,               XK_bracketright, chgalpha,       {.f = +1} },
+  { MODKEY,               XK_F1,           setpalette,     {.i = 0 } },
+  { MODKEY,               XK_F2,           setpalette,     {.i = 1 } },
 };
 
 /*
diff --git a/x.c b/x.c
index 55aa017..2b1a2cf 100644
--- a/x.c
+++ b/x.c
@@ -60,6 +60,7 @@ static void zoom(const Arg *);
 static void zoomabs(const Arg *);
 static void zoomreset(const Arg *);
 static void ttysend(const Arg *);
+static void setpalette(const Arg *);
 static void chgalpha(const Arg *);
 
 /* config.h for applying patches and the configuration. */
@@ -785,23 +786,8 @@ sixd_to_16bit(int x)
 int
 xloadcolor(int i, const char *name, Color *ncolor)
 {
-	XRenderColor color = { .alpha = 0xffff };
-
-	if (!name) {
-		if (BETWEEN(i, 16, 255)) { /* 256 color */
-			if (i < 6*6*6+16) { /* same colors as xterm */
-				color.red   = sixd_to_16bit( ((i-16)/36)%6 );
-				color.green = sixd_to_16bit( ((i-16)/6) %6 );
-				color.blue  = sixd_to_16bit( ((i-16)/1) %6 );
-			} else { /* greyscale */
-				color.red = 0x0808 + 0x0a0a * (i - (6*6*6+16));
-				color.green = color.blue = color.red;
-			}
-			return XftColorAllocValue(xw.dpy, xw.vis,
-			                          xw.cmap, &color, ncolor);
-		} else
-			name = colorname[i];
-	}
+  if (!name)
+    name = colorname[i];
 
 	return XftColorAllocName(xw.dpy, xw.vis, xw.cmap, name, ncolor);
 }
@@ -817,7 +803,7 @@ xloadcols(void)
 		for (cp = dc.col; cp < &dc.col[dc.collen]; ++cp)
 			XftColorFree(xw.dpy, xw.vis, xw.cmap, cp);
 	} else {
-		dc.collen = MAX(LEN(colorname), 256);
+		dc.collen = 16;
 		dc.col = xmalloc(dc.collen * sizeof(Color));
 	}
 
@@ -2100,6 +2086,15 @@ usage(void)
 	    " [stty_args ...]\n", argv0, argv0);
 }
 
+void
+setpalette(const Arg *arg) {
+  if (arg->i < LEN(palettes)) {
+    colorname = palettes[arg->i];
+    xloadcols();
+    cresize(win.w, win.h);
+  }
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -2155,6 +2150,8 @@ main(int argc, char *argv[])
 	} ARGEND;
 
 run:
+  colorname = palettes[0];
+
 	if (argc > 0) /* eat all remaining arguments */
 		opt_cmd = argv;
 
-- 
2.34.1

